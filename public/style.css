:root {
  --bg: #1a1a1a;
  --accent: #00ffff;
  --panel-bg: #111;
  --panel-border: #00ffff;
  --text: #e6faff;
  /* UI sizing tuned to fit 2x item sprites comfortably */
  --slot: 64px;        /* slot box size */
  --gap: 8px;
  --border: 2px;
  --cell: calc(var(--slot) + var(--gap));
}

* { box-sizing: border-box; }
html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  background: var(--bg);
  color: var(--text);
  font-family: 'Roboto Mono', monospace;
  overflow: hidden;
  cursor: url('/assets/sprites/cursor0.png') 16 16, crosshair; /* show custom sprite before lock */
  user-select: none;
}

/* Force custom cursor during HTML5 drag operations */
html.dragging-cursor, html.dragging-cursor body, html.dragging-cursor * {
  cursor: url('/assets/sprites/cursor0.png') 16 16, crosshair !important;
}

#game {
  display: block;
  width: 100vw;
  height: 100vh;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  cursor: url('/assets/sprites/cursor0.png') 16 16, crosshair;
}

#cursorOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  pointer-events: none;
  z-index: 3000;
}

#dragOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  pointer-events: none;
  z-index: 3001; /* above cursor for clarity */
}

#messageBox {
  position: fixed;
  left: 16px;
  bottom: 16px;
  background: rgba(0, 0, 0, 0.5);
  color: var(--text);
  padding: 8px 12px;
  border: 1px solid var(--accent);
  border-radius: 8px;
  min-width: 220px;
  z-index: 1003;
}

.coordinate-display {
  position: fixed;
  top: 20px;
  left: 20px;
  background: rgba(0, 0, 0, 0.8);
  color: #ffffff;
  padding: 8px 12px;
  border-radius: 5px;
  font-family: 'Roboto Mono', monospace;
  font-size: 12px;
  z-index: 1000;
  border: 1px solid rgba(255, 255, 255, 0.2);
}

/* Simple Minimap System */
.minimap {
  position: fixed;
  top: 60px;
  right: 20px;
  width: 240px;
  height: 240px;
  background: rgba(0, 0, 0, 0.85);
  border: 2px solid var(--accent);
  border-radius: 8px;
  z-index: 1000;
  font-family: 'Roboto Mono', monospace;
  backdrop-filter: blur(4px);
  box-shadow: 0 4px 20px rgba(0, 255, 255, 0.2);
  transition: all 0.3s ease;
}

.minimap:hover {
  border-color: #00cccc;
  box-shadow: 0 6px 25px rgba(0, 255, 255, 0.3);
}

.minimap-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  border-bottom: 1px solid var(--accent);
  background: rgba(0, 255, 255, 0.1);
}

.minimap-title {
  color: var(--accent);
  font-size: 14px;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.minimap-location {
  color: var(--accent);
  font-size: 12px;
  font-family: 'Roboto Mono', monospace;
  opacity: 0.8;
}

.minimap-canvas {
  width: 100%;
  height: 200px;
  cursor: crosshair;
  border-radius: 0 0 6px 6px;
}

/* Minimap tooltips */
.minimap-tooltip {
  position: absolute;
  background: rgba(0, 0, 0, 0.9);
  color: var(--accent);
  padding: 6px 10px;
  border-radius: 4px;
  font-size: 11px;
  border: 1px solid var(--accent);
  pointer-events: none;
  z-index: 1001;
  white-space: nowrap;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.minimap-tooltip.visible {
  opacity: 1;
}

.panel {
  position: relative;
  background: rgba(17, 17, 17, 0.8);
  border: 2px solid var(--panel-border);
  border-radius: 12px;
  padding: 8px;
  backdrop-filter: blur(2px);
  z-index: 1001;
}

#hotbar {
  position: fixed;
  left: 50%;
  transform: translateX(-50%);
  bottom: 24px;
  display: grid;
  grid-template-columns: repeat(4, var(--slot));
  gap: var(--gap);
  z-index: 1000;
}

#heatIndicator {
  position: absolute; /* inside game canvas area; positioned by client */
  left: 0;
  top: 0;
  width: 220px;
  height: 8px;
  border: 2px solid var(--accent);
  border-radius: 6px;
  overflow: hidden;
  background: rgba(0,0,0,0.4);
  z-index: 1000;
}
/* Heat fill bar */
#heatIndicator .heatFill {
  width: 0%;
  height: 100%;
  background: var(--accent);
  transition: width 80ms linear;
}

#heatIndicator.overheated {
  border-color: #ff4d4d;
}

#heatIndicator.overheated .heatFill {
  background: #ff4d4d;
}

#gearContainer {
  position: fixed;
  right: 24px;
  bottom: 24px; /* align with hotbar margin */
  display: flex;
  flex-direction: column; /* equipment above, inventory below */
  gap: 12px;
  z-index: 1002;
}

#equipment { width: max-content; }
#inventory { width: max-content; }

#equipmentGrid {
  position: relative;
  width: calc(3 * var(--cell));
  height: calc(3 * var(--cell));
  min-width: calc(3 * var(--cell));
}

/* Absolute layout to mimic body placement (using your sketch) */
.eq-shoulderLeft { position: absolute; left: calc(0 * var(--cell)); top: calc(0 * var(--cell)); }
.eq-head { position: absolute; left: calc(1 * var(--cell)); top: calc(0 * var(--cell)); }
.eq-shoulderRight { position: absolute; left: calc(2 * var(--cell)); top: calc(0 * var(--cell)); }
.eq-chest { position: absolute; left: calc(1 * var(--cell)); top: calc(1 * var(--cell)); }
.eq-backpack { position: absolute; left: calc(2 * var(--cell)); top: calc(1 * var(--cell)); }
.eq-boots { position: absolute; left: calc(1 * var(--cell)); top: calc(2 * var(--cell)); }

#inventory .grid {
  display: grid;
  grid-template-columns: repeat(4, var(--slot));
  gap: var(--gap);
}

.slot {
  width: var(--slot);
  height: var(--slot);
  border: var(--border) solid var(--accent);
  border-radius: 12px;
  background: rgba(0,0,0,0.4);
  display: flex;
  align-items: center;
  justify-content: center;
}

.slot img {
  width: 64px;
  height: 64px;
  image-rendering: pixelated;
  -webkit-user-drag: none;
  user-drag: none;
}

/* While dragging from a slot, hide its contents so it looks lifted */
.slot-drag-source > * {
  visibility: hidden;
}

.active {
  outline: 2px solid var(--accent);
  outline-offset: 2px;
}

.hidden { display: none; }

#gearContainer.hidden { 
  display: none !important; 
}


